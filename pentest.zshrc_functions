#!/bin/bash
# KCP pentest_zshrc functions

# Ascii colors
#
BOLD="\e[1m"
ITAL="\e[3m"
UNDER="\e[4m"
REVERSE="\e[7m"
STRIKE="\e[9m"
FGC="\e[38;5;"
BGC="\e[48;5;"
NC="\e[0m"

echo -ne "${UNDER}kcp${NC}: Loading functions: . . .\n"

# use following sed command to escape symbols (backticks, double quotes, and dollar signs)
# sed -e 's/`/\\`/g' -e 's/"/\\"/g' -e 's/\$/\\\$/g'
function cas() {
	# parameter checking
	# the only acceptable input is one argument in the form of dotted decimal notation IPv4 address
	if [ $# -ne 1 ] || [  ]
	if [[ -z "$QVRUQUNLIEZMQUc" ]]; then
	  NOJOYCOLORARRAY=("15m" "252m" "248m" "244m" "240m" "236m")
	  index=0
	  for color in ${NOJOYCOLORARRAY[@]}; do
	    eval "FGNJC$index=\"${FGC}${color}\""
	    ((index=index+1))
	  done

	  printf """
	  ${FGNJC0}:::.    :::.    ...             ....::::::   ...  .-:.     ::-.
	  ${FGNJC1}\`;;;;,  \`;;; .;;;;;;;.       ;;;;;;;;;\`\`\`\`.;;;;;;;.';;.   ;;;;'
	  ${FGNJC2}  [[[[[. '[[,[[     \[[,     ''\`  \`[[.   ,[[     \[[,'[[,[[['  
	  ${FGNJC3}  \$\$\$ \"Y\$c\$\$\$\$\$,     \$\$\$    ,,,    \`\$\$   \$\$\$,     \$\$\$  c\$\$\"    
	  ${FGNJC4}  888    Y88\"888,_ _,88P    888boood88   \"888,_ _,88P,8P\"\`     
	  ${FGNJC5}  MMM     YM  \"YMMMMMP\"     \"MMMMMMMM\"     \"YMMMMMP\"mM\"        ${NC}
	  """		
		return 1
	elif [[ "$QVRUQUNLIEZMQUc" ]]; then
		if [ $(printenv QVRUQUNLIEZMQUc) -eq 1 ]; then
		  TARGETLOCKCOLORARRAY=("52m" "88m" "124m" "160m" "1m")
		  index=0
		  for color in ${TARGETLOCKCOLORARRAY[@]}; do
		    eval "FGTLC$index=\"${FGC}${color}\""
		    ((index=index+1))
		  done

		  printf """
		  ${FGTLC0}:::::::::::::::.    :::::::..    .,-:::::/ .,::::::::::::::::::
		  ${FGTLC1};;;;;;;;'''';;\`;;   ;;;;\`\`;;;; ,;;-'\`\`\`\`'  ;;;;'''';;;;;;;;''''
		  ${FGTLC2}     [[    ,[[ '[[,  [[[,/[[[' [[[   [[[[[[/[[cccc      [[     
		  ${FGTLC3}     \$\$   c\$\$\$cc\$\$\$c \$\$\$\$\$\$c   \"\$\$c.    \"\$\$ \$\$\"\"\"\"      \$\$     
		  ${FGTLC4}     88,   888   888,888b \"88bo,\`Y8bo,,,o88o888oo,__    88,    
		  ${FGTLC4}     MMM   YMM   \"\"\` MMMM   \"W\"   \`'YMUP\"YMM\"\"\"\"YUMMM   MMM    
		  ${FGTLC4} :::         ...       .,-:::::  :::  .   .,:::::::::::::-.    
		  ${FGTLC4} ;;;      .;;;;;;;.  ,;;;'\`\`\`\`'  ;;; .;;,.;;;;'''' ;;,   \`';,  
		  ${FGTLC3} [[[     ,[[     \[[,[[[         [[[[[/'   [[cccc  \`[[     [[  
		  ${FGTLC2} \$\$'     \$\$\$,     \$\$\$\$\$\$        _\$\$\$\$,     \$\$\"\"\"\"   \$\$,    \$\$  
		  ${FGTLC1}o88oo,.__\"888,_ _,88P\`88bo,__,o,\"888\"88o,  888oo,__ 888_,o8P'  
		  ${FGTLC0}\"\"\"\"YUMMM  \"YMMMMMP\"   \"YUMMMMMP\"MMM \"MMP\" \"\"\"\"YUMMMMMMMP\"\`    ${NC}
		  """			
			echo -ne "TARGET=$TARGET\t\t\tLHOST=$LHOST\n"
			return 0
		else
			echo -ne "Attack Flag is $QVRUQUNLIEZMQUc.\nExiting...\n"
			return 1
		fi
	else
		echo -ne "Attack Flag is $QVRUQUNLIEZMQUc.\nExiting...\n"
		return 1
	fi
}
echo -ne "\t${BOLD}cas${NC}\n"

function ddtohex() {

	local iptoconvert=$1
	local xoct_one=$(printf "%x" $(echo $iptoconvert | cut -d "." -f 1))
	local xoct_two=$(printf "%x" $(echo $iptoconvert | cut -d "." -f 2))
	local xoct_three=$(printf "%x" $(echo $iptoconvert | cut -d "." -f 3))
	local xoct_four=$(printf "%x" $(echo $iptoconvert | cut -d "." -f 4))
	local xip="${xoct_one}${xoct_two}${xoct_three}${xoct_four}"
	echo -ne "${xip}"
}
echo -ne "\t${BOLD}ddtohex${NC}\n"

function new() {
	local targetname=$1
	local currentpath=$(pwd)
	# the directories are user specific
	local TEMPLATEARRAY=("/home/kali/git/0x10/target.zshrc" "/home/kali/git/0x10/target.ctb")
	# check if /etc/hosts has been modified
	grep -w "#\[ipv4\]" /etc/hosts | grep -w "\[hostname\]" > /dev/null
	if [ $? -eq 0 ]; then
		if [[ $currentpath == "/home/kali/KCP/HTB" ]] || [[ $currentpath == "/home/kali/KCP/OSCP" ]]; then
			echo -ne "Making directory ${currentpath}/${targetname} "
			mkdir $targetname
			echo -ne "and copying "
			for template in ${TEMPLATEARRAY[@]}; do
				echo -ne "$template "
				cp $template $currentpath/$targetname/
			done
			echo -ne "\nDon't forget to add $targetname to /etc/hosts "
			# TODO: autopopulate
			return 0
		else
			echo -ne "Will not create directories outside of /home/kali/KCP/HTB or /home/kali/KCP/OSCP \n"
			return 1
		fi
	else
		echo -ne "Found /etc/hosts in unclean state\nExiting..."
		return 1
	fi
}
echo -ne "\t${BOLD}new${NC}\n"

function parseconfig(){
	## checks configuration of following form:
	## DATE	<string>
	## NAME <string>
	## TARGET <dotted decimal IPv4>
	## LHOST <dotted decimal IPv4>
	configfiletocheck=$1
	if [[ -f $configfiletocheck ]]; then
		local __date_fromconfigfile=$(cat $configfiletocheck | grep DATE | awk '{print $2}')
		local __targethostname_fromconfigfile=$(cat $configfiletocheck | grep NAME | awk '{print $2}')
		local __targetipv4_fromconfigfile=$(cat $configfiletocheck | grep TARGET | awk '{print $2}')
		local __localhostipv4_fromconfigfile=$(cat $configfiletocheck | grep LHOST | awk '{print $2}')
		echo -ne "DATE\t$__date_fromconfigfile\nNAME\t$__targethostname_fromconfigfile\nTARGET\t$__targetipv4_fromconfigfile\nLHOST\t$__localhostipv4_fromconfigfile\n"
		return 0
	else
		echo -ne "Configuration file $configfiletocheck does not exist.\n"
		return 1
	fi
}
echo -ne "\t${BOLD}parseconfig${NC}\n"

function pysmbserve(){/home/kali/.local/bin/smbserver.py share /smb}
echo -ne "\t${BOLD}pysmbserve${NC}\n"

function pywebserve(){python3 -m http.server}
echo -ne "\t${BOLD}pywebserve${NC}\n"

function validateip(){
	# the only acceptable input is one argument
	if [ $# -eq 0 ]; then
		local iptovalidate=$1
		local oct_one=$(echo $iptovalidate | cut -d "." -f 1)
		local oct_two=$(echo $iptovalidate | cut -d "." -f 2)
		local oct_three=$(echo $iptovalidate | cut -d "." -f 3)
		local oct_four=$(echo $iptovalidate | cut -d "." -f 4)
		if [[ oct_one -le 255 ]] && [[ oct_one -le 255 ]] && [[ oct_one -le 255 ]] && [[ oct_one -le 255 ]]; then
			return 0
		else
			return 1
		fi
	else
		# more than one input
		return 1
	fi
}
echo -ne "\t${BOLD}validateip${NC}\n"

function vlip(){
	local vlip=$(ip address show tun0 | grep -w inet | awk '{print $2}' | cut -d "/" -f 1)
	echo -ne "${vlip}"
}
echo -ne "\t${BOLD}vlip${NC}\n"

echo -ne "${UNDER}kcp${NC}: done\n"

