#!/bin/bash
# KCP pentest_zshrc functions

# Ascii colors
#
BOLD="\e[1m"
ITAL="\e[3m"
UNDER="\e[4m"
REVERSE="\e[7m"
STRIKE="\e[9m"
FGC="\e[38;5;"
BGC="\e[48;5;"
NC="\e[0m"

echo -ne "${UNDER}kcp${NC}: Loading functions: . . .\n"

function validateip(){
	# the only acceptable input is one argument
	if [ $# -eq 1 ]; then
		local iptovalidate=$1
		local oct_one=$(echo $iptovalidate | cut -d "." -f 1)
		local oct_two=$(echo $iptovalidate | cut -d "." -f 2)
		local oct_three=$(echo $iptovalidate | cut -d "." -f 3)
		local oct_four=$(echo $iptovalidate | cut -d "." -f 4)
		if [[ oct_one -le 255 ]] && [[ oct_two -le 255 ]] && [[ oct_three -le 255 ]] && [[ oct_four -le 255 ]]; then
			return 0
		else
			return 1
		fi
	else
		# more than one input
		return 1
	fi
}
echo -ne "\t${BOLD}validateip${NC}\n"


## /etc/hosts block
# <KCP>
# [ipv4]	[hostname]
# </KCP>

function hostsrestore(){ sudo sed -i -n '/# <KCP>/{p;:a;N;/# <\/KCP>/!ba;s/.*\n/# [ipv4]\t[hostname]\n/};p' /etc/hosts; echo -ne "/etc/hosts has been restored\n" }
echo -ne "\t${BOLD}hostsrestore${NC}\n"

function hoststarget(){
	# check to see if /etc/hosts has been modified
	grep -w "# \[ipv4\]" /etc/hosts | grep -w "\[hostname\]" > /dev/null
	if [ $? -eq 0 ]; then
		# requires two arguments: ipv4 and hostname
		if [ $# -eq 2 ]; then
			local targetipv4=$1
			validateip $targetipv4 > /dev/null
			if [ $? -eq 0 ]; then
				local targethostname=$2
				local hostsentry="${targetipv4}\t${targethostname}"
				echo -ne "Adding ${hostsentry} to /etc/hosts"
				sudo sed -i -n "/# <KCP>/{p;:a;N;/# <\/KCP>/!ba;s/.*\n/${hostsentry}\n/};p" /etc/hosts
			else
				echo -ne "USAGE: $0 <ipv4> <hostname>\n$1 is not valid ipv4\n"
				return 1
			fi
		else
			echo -ne "USAGE: $0 <ipv4> <hostname>\n"
			return 1
		fi
	else
		echo -ne "/etc/hosts has not been restored!\nExiting...\n"
		return 1
	fi
}
echo -ne "\t${BOLD}hoststarget${NC}\n"

function vlip(){
	local vlip=$(ip address show tun0 | grep -w inet | awk '{print $2}' | cut -d "/" -f 1)
	echo -ne "${vlip}"
}
echo -ne "\t${BOLD}vlip${NC}\n"

function xmless(){
	if [ $# -eq 1 ]; then
		file=$1
		if [ -f $file ]; then
			xmllint --format $file | highlight --syntax=xml --out-format=xterm256 | less -R -N
			return 0
		else
			echo -ne "\n$file is not regular file!\n"
			echo -ne "Exiting...\n"
			return 1
		fi
	else
		echo -ne "\nShell function for viewing colorized xml\n"
		echo -ne "USAGE: $0 <xmlfile>\n"
		return 1
	fi
}
echo -ne "\t${BOLD}xmless${NC}\n"

echo -ne "${UNDER}kcp${NC}: done\n"

